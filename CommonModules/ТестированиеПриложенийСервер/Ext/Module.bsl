
Процедура ТестоваяПроцедура(Текст) Экспорт 
	
	ЗаписьЖурналаРегистрации("ПараметрыЗапуска",УровеньЖурналаРегистрации.Примечание,,,Текст);

КонецПроцедуры

Функция СвободныйПорт() Экспорт 
	
	Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("", );
	Запрос.Текст = "ВЫБРАТЬ
	               |	МАКСИМУМ(ЗаданияТестирования.Порт) КАК Порт
	               |ИЗ
	               |	РегистрСведений.ЗаданияТестирования КАК ЗаданияТестирования
	               |ГДЕ
	               |	ЗаданияТестирования.ОкончаниеТестирования = ДАТАВРЕМЯ(1, 1, 1)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() и не Выборка.Порт = null Тогда
		Возврат Выборка.Порт + 1;
	Иначе
		Возврат Константы.НачальныйПортКлиента.Получить();		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьУИДЫНовыхТестов() Экспорт 
	Запрос = Новый Запрос;      
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаданияТестирования.УИД КАК УИД
	               |ИЗ
	               |	РегистрСведений.ЗаданияТестирования КАК ЗаданияТестирования
	               |ГДЕ
	               |	ЗаданияТестирования.НачалоТестирования = ДАТАВРЕМЯ(1, 1, 1)";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("УИД");	
	
КонецФункции

Функция СтрокаПодключенияМенеджераТеста(УИД) Экспорт 
	
	Логин = Константы.МенеджерТестированияПользователь.Получить();
	Пароль = Константы.МенеджерТестированияПароль.Получить();
	
	Возврат СтрШаблон("%1 ENTERPRISE /S %2\%3 /TESTMANAGER %4 %5 /c task_%6",
		                  Константы.ИсполняемыйФайл1С.Получить(),
						  Константы.МенеджерТестированияСервер.Получить(),
						  Константы.МенеджерТестированияБаза.Получить(),
						  ?(ЗначениеЗаполнено(Логин), "/N "+Логин, ""),
						  ?(ЗначениеЗаполнено(Пароль), "/P "+Пароль, ""),
						  УИД
						);
		
КонецФункции
					
Функция ДанныеТестированияПоУИДУ(УИД) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УИД", УИД);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаданияТестирования.ИнформационнаяБаза КАК ИнформационнаяБаза,
	               |	ЗаданияТестирования.Порт КАК Порт
	               |ИЗ
	               |	РегистрСведений.ЗаданияТестирования КАК ЗаданияТестирования
	               |ГДЕ
	               |	ЗаданияТестирования.УИД = &УИД
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СоставЗаданийТестирования.АлгоритмТестирования КАК АлгоритмТестирования,
	               |	СоставЗаданийТестирования.Количество КАК Количество
	               |ИЗ
	               |	РегистрСведений.СоставЗаданийТестирования КАК СоставЗаданийТестирования
	               |ГДЕ
	               |	СоставЗаданийТестирования.УИД = &УИД
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	СоставЗаданийТестирования.Порядок";
	
	Пакет = Запрос.ВыполнитьПакет();
	
	Результат = Новый Структура("Алгоритмы, ИнформационнаяБаза, Порт, СтрокаПодключения", Новый Массив);
	
	СтрокаЗадания = Пакет[0].Выгрузить()[0];	
	ЗаполнитьЗначенияСвойств(Результат, СтрокаЗадания);
	
	ТаблицаТестов = Пакет[1].Выгрузить();
	
	Для Каждого Тест из ТаблицаТестов Цикл
		Результат.Алгоритмы.Добавить(Новый Структура("Алгоритм, КодАлгоритма, Количество", Тест.АлгоритмТестирования.Наименование, Тест.АлгоритмТестирования.Алгоритм, Тест.Количество)); 		
	КонецЦикла;
	
	Результат.СтрокаПодключения = СтрокаПодключенийКлиентаТестирования(Результат.ИнформационнаяБаза, Результат.Порт);
	
	Возврат Результат;	
	
КонецФункции

Функция СтрокаПодключенийКлиентаТестирования(ИнформационнаяБаза, Порт) Экспорт 
	
	Логин = ИнформационнаяБаза.Пользователь ;
	Пароль = ИнформационнаяБаза.Пароль ;
	
	Возврат СтрШаблон("%1 ENTERPRISE /S %2\%3 %4 %5 /TESTCLIENT -TPort %6",
		                  Константы.ИсполняемыйФайл1С.Получить(),
						  ИнформационнаяБаза.ИмяСервера,
						  ИнформационнаяБаза.ИмяБазы,
						  ?(ЗначениеЗаполнено(Логин), "/N "+Логин, ""),
						  ?(ЗначениеЗаполнено(Пароль), "/P "+Пароль, ""),
						  Формат(Порт, "ЧГ=0")
						);	
КонецФункции
					
Процедура ЗафиксироватьНачалоТестирования(УИД) Экспорт 
	
	РегистрыСведений.ЗаданияТестирования.ОбновитьИнформациюПоЗаданию(УИД, Новый Структура("НачалоТестирования", ТекущаяДата()));	
	
КонецПроцедуры

Процедура ЗафиксироватьСобытиеТестирования(УИД, Результат, Ошибки) Экспорт 
	РегистрыСведений.ЗаданияТестирования.ОбновитьИнформациюПоЗаданию(УИД, 
								Новый Структура("РазультатТестирования, Ошибки", 
									Результат,
									Ошибки)
								);	
КонецПроцедуры

Процедура ЗафиксироватьОкочаниеТестирования(УИД, Результат, Ошибки) Экспорт 
	
	РегистрыСведений.ЗаданияТестирования.ОбновитьИнформациюПоЗаданию(УИД, 
								Новый Структура("ОкончаниеТестирования, РазультатТестирования, Ошибки", 
									ТекущаяДата(),
									Результат,
									Ошибки)
								
								);	
	
КонецПроцедуры



Функция ВремяОжиданияЗапускаКлиента() Экспорт 
	Возврат Константы.ВремяОжиданияЗапускаКлиента.Получить();
КонецФункции